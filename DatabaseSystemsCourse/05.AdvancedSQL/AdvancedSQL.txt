1. Write a SQL query to find the names and salaries of the employees that take the minimal salary in the company. Use a nested SELECT statement.

SELECT emp.LastName, emp.Salary FROM Employees emp
WHERE Salary = 
(SELECT MIN(Salary) FROM Employees)

2. Write a SQL query to find the names and salaries of the employees that have a salary that is up to 10% higher than the minimal salary for the company.

SELECT emp.LastName, emp.Salary FROM Employees emp
WHERE Salary < 
(SELECT MIN(Salary) FROM Employees) * 1.1

3. Write a SQL query to find the full name, salary and department of the employees that take the minimal salary in their department. Use a nested SELECT statement.

SELECT DepartmentID, MIN(Salary) as [Minimal Salary For Department]
FROM Employees
GROUP BY DepartmentID

4. Write a SQL query to find the average salary in the department #1.

SELECT DepartmentID, AVG(Salary) as [Average Salary]
FROM Employees
WHERE DepartmentID = 1
GROUP BY DepartmentID 

5. Write a SQL query to find the average salary  in the "Sales" department.

SELECT emp.DepartmentID, AVG(Salary) as [Average Salary]
FROM Employees emp
JOIN Departments dep
ON dep.Name = 'Sales' AND dep.DepartmentID = emp.DepartmentID
GROUP BY emp.DepartmentID 

6. Write a SQL query to find the number of employees in the "Sales" department.

SELECT emp.DepartmentID, COUNT(Salary) AS [Employees Count]
FROM Employees emp
JOIN Departments dep
ON dep.Name = 'Sales' AND dep.DepartmentID = emp.DepartmentID
GROUP BY emp.DepartmentID 

7. Write a SQL query to find the number of all employees that have manager.

SELECT SUM(1) AS [Employees with manager] FROM Employees emp
WHERE emp.ManagerID IS NOT NULL

8. Write a SQL query to find the number of all employees that have no manager.

SELECT SUM(1) AS [Employees with manager] FROM Employees emp
WHERE emp.ManagerID IS NULL

9. Write a SQL query to find all departments and the average salary for each of them.

SELECT emp.DepartmentID, AVG(Salary) FROM Employees emp
JOIN Departments dep
ON emp.DepartmentID = dep.DepartmentID
GROUP BY emp.DepartmentID

10. Write a SQL query to find the count of all employees in each department and for each town.

SELECT dep.DepartmentID, dep.Name, SUM(1) AS [Employees Count] FROM Departments dep 
JOIN Employees emp
ON dep.DepartmentID = emp.DepartmentID
GROUP BY dep.DepartmentID, dep.Name

SELECT tow.TownID, tow.Name, SUM(1) AS [Employees Count] FROM Towns tow
JOIN Addresses addr
ON tow.TownID = addr.TownID
JOIN Employees emp
ON emp.AddressID = addr.TownID
GROUP BY tow.TownID, tow.Name

11. Write a SQL query to find all managers that have exactly 5 employees. Display their first name and last name.

SELECT em.FirstName, em.LastName FROM Employees emp
JOIN Employees em
ON emp.ManagerID = em.EmployeeID
GROUP BY em.EmployeeID, em.FirstName, em.LastName
HAVING COUNT(1) = 5;

12. Write a SQL query to find all employees along with their managers. For employees that do not have manager display the value "(no manager)".

SELECT emp.LastName,
CASE WHEN manag.LastName IS NULL THEN '(No manager)'
ELSE manag.LastName 
END AS Manager
FROM Employees emp
LEFT JOIN Employees manag
ON emp.ManagerID = manag.EmployeeID

13. Write a SQL query to find the names of all employees whose last name is exactly 5 characters long. Use the built-in LEN(str) function.

SELECT emp.LastName
FROM Employees emp
WHERE LEN(emp.LastName) = 5

14. Write a SQL query to display the current date and time in the following format "day.month.year hour:minutes:seconds:milliseconds". Search in  Google to find how to format dates in SQL Server.

SELECT CONVERT(varchar(10), GETDATE(), 104) + ' ' + CONVERT(varchar(12), GETDATE(), 114)

15. Write a SQL statement to create a table Users. Users should have username, password, full name and last login time. Choose appropriate data types for the table fields. 
Define a primary key column with a primary key constraint. 
Define the primary key column as identity to facilitate inserting records. Define unique constraint to avoid repeating usernames. 
Define a check constraint to ensure the password is at least 5 characters long.

CREATE TABLE Users
(
UserId int
IDENTITY(1, 1)
PRIMARY KEY CLUSTERED,
UserName varchar(20) NOT NULL
UNIQUE NONCLUSTERED,
Password varchar(20) NOT NULL
CHECK(LEN(Password) > 5),
FirstName varchar(20) NOT NULL,
LastName varchar(20) NOT NULL,
LastLogin DATETIME
)

16. Write a SQL statement to create a view that displays the users from the Users table that have been in the system today. Test if the view works correctly.

ALTER VIEW [Users View] AS
SELECT UserName, FirstName, LastName FROM Users
WHERE LastLogin = CONVERT(nvarchar(10), GETDATE(), 120)

17. Write a SQL statement to create a table Groups. Groups should have unique name (use unique constraint). Define primary key and identity column.

CREATE TABLE Groups
(
GroupId int
PRIMARY KEY CLUSTERED
IDENTITY,
Name varchar(20) NOT NULL
UNIQUE
)

18. Write a SQL statement to add a column GroupID to the table Users. Fill some data in this new column and as well in the Groups table. Write a SQL statement to add a foreign key constraint between tables Users and Groups tables.

ALTER TABLE Users
ADD GroupId int
FOREIGN KEY (GroupId) REFERENCES Groups(GroupId)

19. Write SQL statements to insert several records in the Users and Groups tables.

INSERT INTO dbo.Groups(Name)
VALUES('SecretGroup'),
('NotSoSecretGroup')

INSERT INTO Users(UserName, Password, FirstName, LastName, LastLogin, GroupId)
VALUES ('Batman', 'nimoapove4e', 'Burs', 'Vein', GETDATE(), 10),
('Penguin', 'batmansux', 'Dani', 'Devito', GETDATE(), 11)

20. Write SQL statements to update some of the records in the Users and Groups tables.

UPDATE Users
SET Password = '123456'
WHERE UserName = 'Penguin'

21. Write SQL statements to delete some of the records from the Users and Groups tables.

DELETE FROM Users
WHERE UserName = 'Batman'

DELETE FROM Groups
WHERE Name = 'SecretGroup'

22. Write SQL statements to insert in the Users table the names of all employees from the Employees table. Combine the first and last names as a full name.
For username use the first letter of the first name + the last name (in lowercase). Use the same for the password, and NULL for last login time.

INSERT INTO Users(UserName, Password, FirstName, LastName, LastLogin, GroupId)
SELECT CONVERT(nvarchar(20),emp.FirstName+emp.LastName), '123456', FirstName, LastName, GETDATE(), 14
FROM Employees emp

23. Write a SQL statement that changes the password to NULL for all users that have not been in the system since 10.03.2010.

UPDATE Users SET Password = NULL
WHERE LastLogin < CONVERT(DATE, '2010.03.10', 102)

24. Write a SQL statement that deletes all users without passwords (NULL password).

DELETE FROM Users
WHERE Password IS NULL

25. Write a SQL query to display the average employee salary by department and job title.

SELECT emp.JobTitle, dep.Name AS [Department name], AVG(emp.Salary) AS [Average Salary]
FROM Employees emp
JOIN Departments dep
ON emp.DepartmentID = dep.DepartmentID
GROUP BY dep.DepartmentID, dep.Name, emp.JobTitle

26. Write a SQL query to display the minimal employee salary by department and job title along with the name of some of the employees that take it.

SELECT emp.LastName, dep.Name, emp.Salary FROM Employees emp
JOIN Departments dep
ON emp.DepartmentID = dep.DepartmentID
WHERE emp.Salary = 
(SELECT MIN(em.Salary) FROM Employees em
WHERE em.DepartmentID = emp.DepartmentID)

27. Write a SQL query to display the town where maximal number of employees work.

SELECT TOP(1) tow.Name FROM Employees emp
JOIN Addresses addr
ON emp.AddressID = addr.AddressID
JOIN Towns tow
ON tow.TownID = addr.TownID
GROUP BY  tow.Name
ORDER BY COUNT(1) DESC

28. Write a SQL query to display the number of managers from each town.

SELECT t.Name, COUNT(DISTINCT manag.EmployeeID) AS Managers
FROM Employees emp 
JOIN Employees manag
ON emp.ManagerID = manag.EmployeeID
JOIN Addresses addr
ON manag.AddressID = addr.AddressID
JOIN Towns t
ON addr.TownID = t.TownID
GROUP BY t.Name
